package main

import "os"
import "fmt"
import (
	"mapreduce"
	"unicode"
	"strings"
	"strconv"
	"sort"
)

type ValueList []string

func (v ValueList) Len() int {
	return len(v)
}

func (v ValueList) Swap(i, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v ValueList) Less(i, j int) bool {
	return v[i]< v[j]
}

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	f := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	words := strings.FieldsFunc(value, f)

	rs:=make([]mapreduce.KeyValue,0)
	existWords:=make(map[string]int,0)
	for _,w:=range words{
		_,ok:=existWords[w]
		if !ok{
			rs=append(rs,mapreduce.KeyValue{Key:w,Value:document})
			existWords[w]=1
		}
	}
	return rs
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	num:=len(values)
	rs:=key
	//rs=strconv.Itoa(num)+" "+strings.Join(values,",")
	sort.Sort(ValueList(values))
	rs=strconv.Itoa(num)+" "+values[0]
	for i:=1;i<len(values);i=i+1{
		rs=rs+","+values[i]
	}

	return rs
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
